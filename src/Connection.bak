import java.io.*;
import java.net.Socket;
import java.util.Date;

public  class Server.Server.Connection extends Thread{
    public static byte id_g = 1;
    public  byte ID;
    public Socket socket;
    public Server.Server.Connection(Socket s)
    {
        System.out.println(s.getInetAddress().getHostName() + " connected to the server");
        for (byte i = 0; i < 2; i++) {
            for (Server.Server.Connection d:Server.Server.connections
                 ) {
                if(d.ID!=i){ID = i; break;};
            }
        }
        socket = s;
        start();
    }

    @Override
    public void run() {
        try {
            try {

                super.run();
                while(true)
                {

                    synchronized (Server.Server.messages) {
                        if (!Server.Server.messages.isEmpty()) {
                            Server.Message msg = Server.Server.messages.peek();
                            Server.Server.field[(msg.CODE - 1) / 3][(msg.CODE - 1) % 3] = (byte) (msg.user);
                            synchronized (Server.Server.connections) {
                                for (Server.Server.Connection d :
                                        Server.Server.connections) {
                                    Server.Server.connectionStreams.get(d.ID).oos.writeObject(msg);
                                    Server.Server.connectionStreams.get(d.ID).oos.flush();
                                }
                            }
                            Server.Server.messages.remove();
                        }
                    }
                    String s = new String();
                    int code = (int) Server.Server.connectionStreams.get(ID).ois.readObject();
                    System.out.println(ID + ":" + code);
                        if (Server.Server.messages.isEmpty() && ID != Server.Server.lastPlayer) {
                            Server.Server.lastPlayer = ID;
                            Server.Server.messages.add(new Server.Message(code, ID));
                            System.out.println( Server.Server.messages.size());
                        } else {
                        }


                }
            }catch (Exception e) {
                System.out.println(e);

            }finally {
                System.out.println("Server.Server.Connection " + socket.getInetAddress().getHostName() + " closed");
            }
        } finally {
            try {
                socket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}